import type { Rules, Config } from '../types/config'

const eslintRules: Rules = {
  'no-var': ['error'],
  eqeqeq: ['error', 'always', { null: 'never' }],
  'no-debugger': ['error'],
  camelcase: ['error'],
  'no-self-compare': ['error'],
  'no-unused-private-class-members': ['error'],
  'default-case': ['error'],
  'default-case-last': ['error'],
  'no-caller': ['error'],
  'no-console': ['error'],
  'no-alert': ['error'],
  'no-with': ['error'],
  'prefer-const': ['error'],
  'symbol-description': ['error'],
  'block-scoped-var': ['error'],
  'no-bitwise': ['error'],
  'new-cap': ['error', { newIsCap: true, capIsNew: true, properties: true }],
  'no-new': ['error'],
  'use-isnan': [
    'error',
    { enforceForSwitchCase: true, enforceForIndexOf: true },
  ],
  'no-empty-pattern': ['error'],
  'no-new-symbol': ['error'],
  'no-new-object': ['error'],
  'no-octal': ['error'],
  'no-octal-escape': ['error'],
  'no-obj-calls': ['error'],
  'prefer-rest-params': ['error'],
  'no-script-url': ['error'],
  'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
  'valid-typeof': ['error'],
  radix: ['error', 'always'],
  'no-duplicate-imports': ['error'],
  'no-constant-condition': ['error', { checkLoops: false }],
  'require-yield': ['error'],
  'getter-return': ['error'],
  'no-new-wrappers': ['error'],
  'no-new-native-nonconstructor': ['error'],
  'no-useless-rename': ['error'],
  'one-var': ['error', 'never'],
  'no-useless-computed-key': ['error', { enforceForClassMembers: true }],
  'object-shorthand': ['error', 'always', { avoidExplicitReturnArrows: true }],
  'no-return-assign': ['error'],
  'no-proto': ['error'],
  'no-useless-concat': ['error'],
  'for-direction': ['error'],
  'prefer-numeric-literals': ['error'],
  'no-constructor-return': ['error'],
  'no-dupe-args': ['error'],
  'no-shadow-restricted-names': ['error'],
  'no-unused-labels': ['error'],
  'no-extra-label': ['error'],
  'no-extend-native': ['error'],
  'no-dupe-keys': ['error'],
  'no-extra-bind': ['error'],
  'no-eval': ['error'],
  'no-delete-var': ['error'],
  'no-extra-boolean-cast': ['error'],
  'no-global-assign': ['error'],
  'prefer-spread': ['error'],
  'no-iterator': ['error'],
  'no-label-var': ['error'],
  'no-lonely-if': ['error'],
  'no-fallthrough': ['error'],
  'no-negated-condition': ['error'],
  'no-self-assign': ['error'],
  'no-prototype-builtins': ['error'],
  'prefer-promise-reject-errors': ['error'],
  'no-nonoctal-decimal-escape': ['error'],
  'no-func-assign': ['error'],
  'no-import-assign': ['error'],
  'prefer-exponentiation-operator': ['error'],
  'no-sparse-arrays': ['error'],
  'no-implicit-coercion': ['error', { disallowTemplateShorthand: true }],
  'no-ex-assign': ['error'],
  'no-empty-static-block': ['error'],
  'no-dupe-else-if': ['error'],
  'no-empty': ['error', { allowEmptyCatch: true }],
  'no-duplicate-case': ['error'],
  'no-const-assign': ['error'],
  'constructor-super': ['error'],
  'logical-assignment-operators': ['error'],
  'no-new-func': ['error'],
  'no-unneeded-ternary': ['error'],
  'no-useless-return': ['error'],
  'operator-assignment': ['error'],
  'no-cond-assign': ['error', 'always'],
  'no-compare-neg-zero': ['error'],
  'no-class-assign': ['error'],
  'no-case-declarations': ['error'],
  'no-useless-escape': ['error'],
  'no-useless-catch': ['error'],
  'no-undef-init': ['error'],
  'no-setter-return': ['error'],
  'prefer-arrow-callback': ['error'],
  'no-unsafe-optional-chaining': [
    'error',
    { disallowArithmeticOperators: true },
  ],
  'no-unreachable-loop': ['error'],
  'no-unreachable': ['error'],
  'no-unsafe-finally': ['error'],
  'no-useless-call': ['error'],
  'prefer-destructuring': ['error', { object: true, array: false }],
  'no-this-before-super': ['error'],
  'no-promise-executor-return': ['error'],
  'new-parens': ['error'],
  'no-async-promise-executor': ['error'],
  'no-constant-binary-expression': ['error'],
  'no-implicit-globals': ['error'],
  'consistent-return': ['error'],
  'dot-notation': ['error'],
  'require-await': ['error'],
  'no-return-await': ['error'],
  'no-implied-eval': ['error'],
  'no-throw-literal': ['error'],
  'prefer-object-spread': ['warn'],
  'guard-for-in': ['warn'],
  'require-atomic-updates': ['warn'],
  'no-loop-func': ['warn'],
  'no-unmodified-loop-condition': ['warn'],
}

const typescriptEslintRules: Rules = {
  '@typescript-eslint/no-array-constructor': ['error'],
  '@typescript-eslint/default-param-last': ['error'],
  '@typescript-eslint/no-empty-function': ['error'],
  '@typescript-eslint/no-dupe-class-members': ['error'],
  '@typescript-eslint/no-invalid-this': ['error'],
  '@typescript-eslint/no-loop-func': ['warn'],
  '@typescript-eslint/no-loss-of-precision': ['error'],
  '@typescript-eslint/no-redeclare': [
    'error',
    { ignoreDeclarationMerge: false },
  ],
  '@typescript-eslint/adjacent-overload-signatures': ['error'],
  '@typescript-eslint/array-type': [
    'error',
    { default: 'array', readonly: 'array' },
  ],
  '@typescript-eslint/ban-ts-comment': [
    'error',
    {
      'ts-expect-error': false,
      'ts-check': false,
      'ts-ignore': true,
      'ts-nocheck': true,
    },
  ],
  '@typescript-eslint/ban-tslint-comment': ['error'],
  '@typescript-eslint/ban-types': ['warn'],
  '@typescript-eslint/consistent-generic-constructors': [
    'error',
    'constructor',
  ],
  '@typescript-eslint/consistent-indexed-object-style': ['warn', 'record'],
  '@typescript-eslint/consistent-type-assertions': ['error'],
  '@typescript-eslint/consistent-type-imports': [
    'error',
    {
      prefer: 'type-imports',
      fixStyle: 'separate-type-imports',
    },
  ],
  '@typescript-eslint/explicit-member-accessibility': [
    'error',
    { overrides: { constructors: 'no-public' } },
  ],
  '@typescript-eslint/method-signature-style': ['error', 'property'],
  '@typescript-eslint/naming-convention': [
    'error',
    {
      selector: 'interface',
      format: ['PascalCase'],
    },
    {
      selector: 'typeLike',
      format: ['PascalCase'],
    },
  ],
  '@typescript-eslint/triple-slash-reference': ['warn'],
  '@typescript-eslint/unified-signatures': ['error'],
  '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
  '@typescript-eslint/no-dynamic-delete': ['warn'],
  '@typescript-eslint/no-empty-interface': ['error'],
  '@typescript-eslint/no-explicit-any': ['warn'],
  '@typescript-eslint/no-extra-non-null-assertion': ['error'],
  '@typescript-eslint/no-import-type-side-effects': ['error'],
  '@typescript-eslint/no-inferrable-types': ['error'],
  '@typescript-eslint/no-misused-new': ['error'],
  '@typescript-eslint/no-unused-expressions': ['error'],
  '@typescript-eslint/no-useless-constructor': ['error'],
  '@typescript-eslint/no-use-before-define': ['error', { functions: false }],
  '@typescript-eslint/prefer-as-const': ['error'],
  '@typescript-eslint/no-unnecessary-type-constraint': ['error'],
  '@typescript-eslint/prefer-function-type': ['error'],
  '@typescript-eslint/no-unsafe-declaration-merging': ['error'],
  '@typescript-eslint/no-non-null-asserted-nullish-coalescing': ['error'],
  '@typescript-eslint/no-non-null-asserted-optional-chain': ['error'],
  '@typescript-eslint/no-non-null-assertion': ['warn'],
  '@typescript-eslint/no-this-alias': ['error'],
}

const typescriptEnumRules: Rules = {
  'typescript-enum/no-enum': ['error'],
}

const securityRules: Rules = {
  'security/detect-bidi-characters': ['error'],
  'security/detect-buffer-noassert': ['error'],
  'security/detect-child-process': ['error'],
  'security/detect-eval-with-expression': ['error'],
  'security/detect-new-buffer': ['error'],
  'security/detect-non-literal-regexp': ['error'],
  'security/detect-unsafe-regex': ['error'],
  'security/detect-non-literal-require': ['error'],
  'security/detect-pseudoRandomBytes': ['error'],
  'security/detect-non-literal-fs-filename': ['warn'],
  'security/detect-object-injection': ['warn'],
  'security/detect-possible-timing-attacks': ['warn'],
}

const unicornRules: Rules = {
  'unicorn/consistent-destructuring': ['error'],
  'unicorn/custom-error-definition': ['error'],
  'unicorn/error-message': ['error'],
  'unicorn/new-for-builtins': ['error'],
  'unicorn/no-array-push-push': ['error'],
  'unicorn/no-document-cookie': ['error'],
  'unicorn/no-empty-file': ['error'],
  'unicorn/no-instanceof-array': ['error'],
  'unicorn/filename-case': [
    'error',
    {
      cases: {
        camelCase: true,
        pascalCase: true,
      },
    },
  ],
  'unicorn/no-new-buffer': ['error'],
  'unicorn/no-unnecessary-await': ['error'],
  'unicorn/no-useless-length-check': ['error'],
  'unicorn/no-useless-spread': ['error'],
  'unicorn/no-useless-switch-case': ['error'],
  'unicorn/no-useless-undefined': ['error'],
  'unicorn/no-zero-fractions': ['error'],
  'unicorn/prefer-array-flat-map': ['error'],
  'unicorn/prefer-date-now': ['error'],
  'unicorn/prefer-default-parameters': ['error'],
  'unicorn/prefer-export-from': ['error', { ignoreUsedVariables: true }],
  'unicorn/prefer-modern-math-apis': ['error'],
  'unicorn/prefer-node-protocol': ['error'],
  'unicorn/prefer-optional-catch-binding': ['error'],
  'unicorn/prefer-query-selector': ['error'],
  'unicorn/prefer-spread': ['warn'],
  'unicorn/prefer-string-replace-all': ['error'],
  'unicorn/prefer-string-slice': ['error'],
  'unicorn/prefer-string-trim-start-end': ['error'],
  'unicorn/prefer-switch': ['error'],
  'unicorn/prefer-type-error': ['warn'],
  'unicorn/require-array-join-separator': ['error'],
  'unicorn/require-number-to-fixed-digits-argument': ['error'],
  'unicorn/throw-new-error': ['error'],
}

const config: Config = {
  plugins: ['@typescript-eslint', 'typescript-enum', 'security', 'unicorn'],
  rules: {
    ...eslintRules,
    ...typescriptEslintRules,
    ...typescriptEnumRules,
    ...securityRules,
    ...unicornRules,
  },
}

export = config
